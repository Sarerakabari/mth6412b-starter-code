var documenterSearchIndex = {"docs":
[{"location":"#STSP.jl","page":"STSP.jl","title":"STSP.jl","text":"","category":"section"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Index","page":"STSP.jl","title":"Index","text":"","category":"section"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Modules = [STSP]","category":"page"},{"location":"#STSP.AbstractEdge","page":"STSP.jl","title":"STSP.AbstractEdge","text":"Type abstrait dont d'autres types d'arêtes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractGraph","page":"STSP.jl","title":"STSP.AbstractGraph","text":"Type abstrait dont d'autres types de graphes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractNode","page":"STSP.jl","title":"STSP.AbstractNode","text":"Type abstrait dont d'autres types de noeuds dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractQueue","page":"STSP.jl","title":"STSP.AbstractQueue","text":"Type abstrait de Queue \n\n\n\n\n\n","category":"type"},{"location":"#STSP.Abstractnode_pointer","page":"STSP.jl","title":"STSP.Abstractnode_pointer","text":"Type abstrait d'un composant connexe: noeud enfant pointant vers le noeud parent .\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Abstractnode_priority","page":"STSP.jl","title":"STSP.Abstractnode_priority","text":"Type abstrait d'un node_priority.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Edge","page":"STSP.jl","title":"STSP.Edge","text":"Type représentant les aretes d'un graphe.\n\nExemple:\n\n    noeud1 = Node(\"James\", 12)\n    noeud2= Node(\"Kirk\",14)\n    \n    edge=Edge(\"(noeud1, noeud2)\",12,noeud1,noeud2)\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Graph","page":"STSP.jl","title":"STSP.Graph","text":"Type representant un graphe comme un ensemble de noeuds.\n\nExemple :\n\nn1 = Node(\"Joe\", 3.14)\nn2 = Node(\"Steve\", exp(1))\nn3 = Node(\"Jill\", 4.12)\ne1=Edge(\"1,2\",10,n1,n2)\ne2=Edge(\"1,3\",100,n1,n2)\nG = Graph(\"Test\", [n1, n2, n3],[e1,e2])\nshow(G)\n\nAttention, tous les noeuds doivent avoir des données de même type.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Node","page":"STSP.jl","title":"STSP.Node","text":"Type représentant les noeuds d'un graphe.\n\nExemple:\n\n    noeud = Node(\"James\", [π, exp(1)])\n    noeud = Node(\"Kirk\", \"guitar\")\n    noeud = Node(\"Lars\", 2)\n\n\n\n\n\n","category":"type"},{"location":"#STSP.node_Queue","page":"STSP.jl","title":"STSP.node_Queue","text":"Type représentant une file de priorité avec des éléments node_priority de type T.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.node_pointer-Union{Tuple{Node{T}}, Tuple{T}} where T","page":"STSP.jl","title":"STSP.node_pointer","text":"Constructeur d'une composante connexe à partir d'un noeud\n\n\n\n\n\n","category":"method"},{"location":"#STSP.node_priority","page":"STSP.jl","title":"STSP.node_priority","text":"Type node_priority contentant 4 attributs : son nom (de type String), le noeud en lui-même (de type Node{T}), son parent (qui est soit de type Node{T}, soit Nothing), et sa priorité (qui est un nombre).\n\n\n\n\n\n","category":"type"},{"location":"#STSP.node_priority-Union{Tuple{Node{T}}, Tuple{T}} where T","page":"STSP.jl","title":"STSP.node_priority","text":"node_priority(node::Node{T}) where T\n\nConstructeur du type node_priority. On va initialiser le parent à nothing et la priorité à Inf\n\nArguments\n\nnode::Node{T}: le noeud sur lequel on se base pour construire l'élément.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Tuple{node_priority, node_priority}","page":"STSP.jl","title":"Base.:==","text":"==(p::node_priority, q::node_priority)\n\nDéfinition d'une relation d'égalité entre éléments de type node_priority\n\n\n\n\n\n","category":"method"},{"location":"#Base.isless-Tuple{node_priority, node_priority}","page":"STSP.jl","title":"Base.isless","text":"isless(p::node_priority, q::node_priority)\n\nDéfinition d'une relation d'ordre entre éléments de type node_priority\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"Base.length","text":"Donne le nombre d'éléments sur la file.\n\n\n\n\n\n","category":"method"},{"location":"#Base.popfirst!-Union{Tuple{STSP.AbstractQueue{T}}, Tuple{T}} where T","page":"STSP.jl","title":"Base.popfirst!","text":"popfirst!(q::AbstractQueue{T}) where T\n\nRetire et renvoie l'élément de plus basse priorité\n\nArguments\n\nq::AbstractQueue{T}: file de priorité considérée\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Union{Tuple{T}, Tuple{STSP.AbstractQueue{T}, node_priority{T}}} where T","page":"STSP.jl","title":"Base.push!","text":"push!(q::AbstractQueue{T}, item::node_priority{T}) where T\n\nAjoute l'élément item à la file de priorité q\n\nArguments\n\nq::AbstractQueue{T}: file de priorité considérée\nitem::node_priority{T}: élément à ajouter à la file\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{Graph}","page":"STSP.jl","title":"Base.show","text":"Affiche un graphe\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"Base.show","text":"Affiche un arete.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"Base.show","text":"Affiche un noeud.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Union{Tuple{STSP.AbstractQueue{T}}, Tuple{T}} where T","page":"STSP.jl","title":"Base.show","text":"show(q::AbstractQueue{T}) where T\n\nAffiche une file de priorité.\n\nArguments\n\nq::AbstractQueue{T}: file de priorité considérée\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Edges-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.Edges","text":"Renvoie la liste des arêtes du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Name-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.Name","text":"Renvoie le nom du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Nodes-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.Nodes","text":"Renvoie la liste des noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_edge!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Edge{T, S}}} where {T, S}","page":"STSP.jl","title":"STSP.add_edge!","text":"Ajoute un arrete au graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_node!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}}} where {T, S}","page":"STSP.jl","title":"STSP.add_node!","text":"Ajoute un noeud au graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.data-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.data","text":"Renvoie les données contenues dans l'arête.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.data-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"STSP.data","text":"Renvoie les données contenues dans le noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.is_empty-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"STSP.is_empty","text":"Indique si la file est vide.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.link!-Union{Tuple{T}, Tuple{node_pointer{T}, node_pointer{T}, Array{node_pointer{T}, 1}}} where T","page":"STSP.jl","title":"STSP.link!","text":"liaison de deux composantes connexes dans un ensemble de composantes connexes\n\n\n\n\n\n","category":"method"},{"location":"#STSP.n_nodes_to_read-Tuple{String, Int64, Int64}","page":"STSP.jl","title":"STSP.n_nodes_to_read","text":"Fonction auxiliaire de read_edges, qui détermine le nombre de noeud à lire en fonction de la structure du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.name","text":"Renvoie le nom de l'arêtes.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"STSP.name","text":"Renvoie le nom du noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_edges-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.nb_edges","text":"Renvoie le nombre de arête du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_nodes-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.nb_nodes","text":"Renvoie le nombre de noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.node1-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.node1","text":"Renvoie le noeud1 de l'arêtes.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.node2-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.node2","text":"Renvoie le noeud2 de l'arêtes.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.parcours_preordre!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}, Dict{Node{T}, Bool}, Array{Node{T}, 1}}} where {T, S}","page":"STSP.jl","title":"STSP.parcours_preordre!","text":"Parcours en préordre d'une arbre (Parcour dans l'ordre de visite comme Prim)\n\n\n\n\n\n","category":"method"},{"location":"#STSP.parent!-Tuple{node_priority, Node}","page":"STSP.jl","title":"STSP.parent!","text":"parent!(p::node_priority,parent::Node)\n\nMise à jour du parent d'un élément de type node_priority\n\nArguments\n\np::node_priority: élément de type node_priority dont on va vouloir modifier le parent\nparent::Node: noeud qui sera le nouveau parent de la node_priority.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{Any, Any}","page":"STSP.jl","title":"STSP.plot_graph","text":"Affiche un graphe étant données un ensemble de noeuds et d'arêtes.\n\nExemple :\n\ngraph_nodes, graph_edges = read_stsp(\"bayg29.tsp\")\nplot_graph(graph_nodes, graph_edges)\nsavefig(\"bayg29.pdf\")\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{String}","page":"STSP.jl","title":"STSP.plot_graph","text":"Fonction de commodité qui lit un fichier stsp et trace le graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.prim-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}}} where {T, S}","page":"STSP.jl","title":"STSP.prim","text":"prim(graph::Graph{T,S},start::Node{T}) where {T,S}\n\nAlgorithme de Prim, qui renvoie un vecteur d'arêtes représentant un arbre de recouvrement minimal du graph donné en argument, et le poids total de cet arbre de recouvrement minimal.\n\nArguments\n\ngraph::Graph{T,S}: le graph considéré dont on cherche un arbre de recouvrement minimal.\nstart::Node{T}: le noeud de start pour la création de l'arbre de recouvrement minimal\n\n\n\n\n\n","category":"method"},{"location":"#STSP.priority!-Tuple{node_priority, Number}","page":"STSP.jl","title":"STSP.priority!","text":"priority!(p::node_priority, priority::Number)\n\nMise à jour de la priorité d'un élément de type node_priority\n\nArguments\n\np::node_priority: élément de type node_priority dont on va vouloir modifier la priorité\npriority::Number: nouvelle valeur de la priorité\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_header-Tuple{String}","page":"STSP.jl","title":"STSP.read_header","text":"Analyse un fichier .tsp et renvoie un dictionnaire avec les données de l'entête.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_nodes-Tuple{Dict{String, String}, String}","page":"STSP.jl","title":"STSP.read_nodes","text":"Analyse un fichier .tsp et renvoie un dictionnaire des noeuds sous la forme {id => [x,y]}. Si les coordonnées ne sont pas données, un dictionnaire vide est renvoyé. Le nombre de noeuds est dans header[\"DIMENSION\"].\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_stsp-Tuple{String}","page":"STSP.jl","title":"STSP.read_stsp","text":"Renvoie les noeuds et les arêtes du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.rsl-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}}} where {T, S}","page":"STSP.jl","title":"STSP.rsl","text":"L'algorithme rsl pour déterminer une tournée minimale approximative à partie d'un noeud départ choisi\n\n\n\n\n\n","category":"method"},{"location":"#STSP.unite!-Union{Tuple{T}, Tuple{Node{T}, Node{T}, Array{node_pointer{T}, 1}}} where T","page":"STSP.jl","title":"STSP.unite!","text":"Liaison de deux racines de noeuds données en argument dans un ensemble de composantes connexes\n\n\n\n\n\n","category":"method"}]
}
